package ikutil.ui;

import flambe.Component;
import flambe.Entity;
import flambe.asset.AssetPack;
import flambe.display.Sprite;
import flambe.swf.Library;
import flambe.swf.MoviePlayer;
import flambe.swf.MovieSprite;

typedef NotificationDef = {
	var name:String;
	var x:Float;
	var y:Float;
}

/**
 * @brief      Displays and Manages notification animations generated by flump.
 */
class NotificationManager extends Component {

	/**
	 * @brief      Creates a notification manager
	 *
	 * @param      library        The flump library used to generate the notifications.
	 * @param      notifications  An array of notification definitions.
	 */
	public function new(library:Library, notifications:Array<NotificationDef>) {
	    super();

	    _lib = library;
	    _mp = new MoviePlayer(_lib);

	    _definitions = new Map<String, NotificationDef>();
	    _notifications = new Map<String, Entity>();
	    _names = new Array<String>();
	    for (n in notifications) {
	    	_definitions.set(n.name, n);
	    	_names.push(n.name);
	    	_notifications.set(n.name, new Entity().add(_lib.createMovie(n.name, true)));
	    }

	    _playing = new Array<MovieSprite>();
	}

	/**
	 * @brief      Displays a notification.
	 *
	 * @param      name  Name of the notification to display.
	 *
	 * @return     Returns the notification.
	 */
	public function showNotification(name:String = null):MovieSprite {
		if(name == null) {
			name = _names[Math.floor(_names.length * Math.random())];
		}
		else if(!_definitions.exists(name)) {
			throw "Notification does not exits: " + name;
		}

		var def = _definitions.get(name);
		var n = _notifications.get(name);
		owner.addChild(n);
		var spr = n.get(MovieSprite);
		_playing.push(spr);
		spr.setXY(def.x, def.y);
		spr.position = 0;
		spr.paused = false;
		spr.looped.connect(onMovieLooped)
			.once();

		return spr;
	}

	private function onMovieLooped():Void {
	    for (spr in _playing) {
	    	if(spr.position == spr.position % spr.symbol.duration) {
	    		owner.removeChild(spr.owner);

	    		_playing.remove(spr);
	    		break;
	    	}
	    }
	}

	private var _mp:MoviePlayer;
	private var _lib:Library;

	private var _definitions:Map<String, NotificationDef>;
	private var _names:Array<String>;
	private var _notifications:Map<String, Entity>;

	private var _playing:Array<MovieSprite>;
}